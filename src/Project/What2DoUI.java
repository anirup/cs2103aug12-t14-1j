package Project;

import java.awt.event.KeyEvent;
import java.util.ArrayList;

/**
 * 
 * @author SANDEEP
 */
public class What2DoUI extends javax.swing.JFrame {

	/**
	 * Creates new form What2DoUI
	 */
	public What2DoUI() {
		initComponents();
	}
	int updateFlag=0;
	String demo="daff";
	char lastEvent = ' ';
	String previousEntry = "";
	int flag = 0;
	boolean toUpdate = true;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {

		jScrollPane6 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();
		jTabbedPane1 = new javax.swing.JTabbedPane();
		jTabbedPane2 = new javax.swing.JTabbedPane();
		jPanel1 = new javax.swing.JPanel();
		textField1 = new java.awt.TextField();
		jScrollPane4 = new javax.swing.JScrollPane();
		jLabel4 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		jLayeredPane1 = new javax.swing.JLayeredPane();
		jPanel2 = new javax.swing.JPanel();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTextArea2 = new javax.swing.JTextArea();
		
		jScrollPane2 = new javax.swing.JScrollPane();
		jLabel3 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		
		
		jPanel4 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();

        //jLabel3 = new javax.swing.JLabel();

		jTable1.setModel(new javax.swing.table.DefaultTableModel(
				new Object[][] { { null, null, null, null },
						{ null, null, null, null }, { null, null, null, null },
						{ null, null, null, null } }, new String[] { "Title 1",
						"Title 2", "Title 3", "Title 4" }));
		jScrollPane6.setViewportView(jTable1);

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jPanel1.setBackground(new java.awt.Color(241, 235, 194));

		textField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
		textField1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
		textField1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				textField1ActionPerformed(evt);
			}
		});
		textField1.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				textField1KeyPressed(evt);
			}

			public void keyTyped(java.awt.event.KeyEvent evt) {
				try {
					textField1KeyTyped(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});

		jLabel4.setFont(new java.awt.Font("Monospaced", 2, 14)); // NOI18N
		jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">Available operations are</span></b><span style=\"font-family: Helvetica, sans-serif; \">- </span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \">add (+)/delete(-)/search/update/undo/done/undone/exit</span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		jScrollPane4.setViewportView(jLabel4);

		jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/Logo3.png"))); // NOI18N
		jLabel2.setText("jLabel2");
		jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(
				new java.awt.Color(0, 0, 0), 5));

		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/Logo5.png"))); // NOI18N
		jLabel1.setText("jLabel1");
		jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(
				0, 0, 0), 5, true));

		jPanel2.setBackground(new java.awt.Color(240, 233, 194));

		jTextArea2.setColumns(20);
		jTextArea2.setFont(new java.awt.Font("Monospaced", 1, 12));
		jTextArea2.setRows(5);
		jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				"Upcoming Events",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Monospaced", 1, 14), java.awt.Color.black)); // NOI18N
		jScrollPane3.setViewportView(jTextArea2);

		/*jTextArea3.setColumns(20);
		jTextArea3.setFont(new java.awt.Font("Monospaced", 1, 12));
		jTextArea3.setRows(5);
		jTextArea3.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				"Floating Events",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Monospaced", 1, 14), java.awt.Color.black)); // NOI18N
		jScrollPane5.setViewportView(jTextArea3);*/

		jScrollPane2.setViewportView(jLabel3);

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addContainerGap()
										.addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE))
						.addComponent(jScrollPane2,
								javax.swing.GroupLayout.Alignment.TRAILING));
		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addComponent(
												jScrollPane2,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												23,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												17, Short.MAX_VALUE)
										.addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));

		jPanel2.setBounds(0, 0, 890, 340);
		jLayeredPane1.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

		jPanel3.setBackground(new java.awt.Color(240, 233, 194));
		jPanel3.setVisible(false);
		
		jLabel3.setOpaque(true);
		jLabel3.setBackground(new java.awt.Color(255, 255, 255));
		jLabel4.setOpaque(true);
		jLabel4.setBackground(new java.awt.Color(255, 255, 255));

		
		jTextArea1.setEditable(false);
		jTextArea2.setEditable(false);
		jTextArea4.setEditable(false);
		
		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jTextArea1.setFont(new java.awt.Font("Monospaced", 1, 12));
		jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				"Search Results",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Monospaced", 1, 14), java.awt.Color.black)); // NOI18N
		jScrollPane1.setViewportView(jTextArea1);

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(
				jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel3Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane1,
								javax.swing.GroupLayout.DEFAULT_SIZE, 863,
								Short.MAX_VALUE).addContainerGap()));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel3Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane1,
								javax.swing.GroupLayout.DEFAULT_SIZE, 309,
								Short.MAX_VALUE).addContainerGap()));

		jPanel3.setBounds(0, 0, 883, 331);
		jLayeredPane1.add(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
		

 jPanel4.setBackground(new java.awt.Color(240, 232, 194));

        jTextArea4.setEditable(false);
        jTextArea4.setColumns(20);
        jTextArea4.setRows(5);
        jTextArea4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Floating Events", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14), java.awt.Color.black)); // NOI18N
        jScrollPane7.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 883, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBounds(0, 0, 903, 335);
        jLayeredPane1.add(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

 

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGap(24, 24, 24)
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																textField1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																jScrollPane4)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addComponent(
																				jLabel2,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				276,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jLabel1,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				591,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addContainerGap(
																				20,
																				Short.MAX_VALUE))
														.addComponent(
																jLayeredPane1))));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.TRAILING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabel2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																128,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jLabel1))
										.addGap(1, 1, 1)
										.addComponent(
												textField1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												34,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jScrollPane4,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jLayeredPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												340, Short.MAX_VALUE)
										.addContainerGap()));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel1,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.PREFERRED_SIZE));

		pack();
	}// </editor-fold>

	private void textField1KeyTyped(java.awt.event.KeyEvent evt)
			throws Exception {// GEN-FIRST:event_textField1KeyTyped

		if (evt.getKeyChar() == 8) {
			if (textField1.getText().isEmpty()) {
				flag = 0;
				jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">Available operations are</span></b><span style=\"font-family: Helvetica, sans-serif; \">- </span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \">add (+)/delete(-)/search/update/undo/done/undone/exit</span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
			}
		}
		if (flag == 0
				&& ((evt.getKeyChar() == 'a') || (evt.getKeyChar() == '+'))) {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[add] [Key words] [start time and date] [End time and date] [r-reminder time]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 	&& ((evt.getKeyChar() == 'b'))) {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">Available operations are</span></b><span style=\"font-family: Helvetica, sans-serif; \">- </span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \">add (+)/delete(-)/search/update/undo/done/undone/exit</span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && (evt.getKeyChar() == '-')) {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[delete] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
			
		}
		if (flag == 0 && evt.getKeyChar() == 'd') {
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[delete] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (evt.getKeyChar() == 'e' && lastEvent == 'd') {
			flag = 1;
			lastEvent = evt.getKeyChar();

			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[delete] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
			
		}
		else if (flag == 0 && evt.getKeyChar() == 'o' && lastEvent == 'd') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[done] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && evt.getKeyChar() == 's') {
			flag = 1;
			lastEvent = evt.getKeyChar();

			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[search] [keywords]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");

		}
		if (flag == 0 && evt.getKeyChar() == 'u') {
			lastEvent = 'u';
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[update] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");

		}
		if (flag == 0 && evt.getKeyChar() == 'e') {
			flag = 1;
			lastEvent = evt.getKeyChar();

			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[exit]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && evt.getKeyChar() == 'n' && lastEvent == 'u') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[undo] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");

		} else if (flag == 0 && evt.getKeyChar() == 'p' && lastEvent == 'u') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[update] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}

		if (evt.getKeyChar() == '\n') {
			flag = 0;
			String data = textField1.getText();
			if (data.contains("search")) {
				jPanel2.setVisible(false);
				jPanel3.setVisible(true);
			}
			if (data.contains("back")) {
				jPanel3.setVisible(false);
				jPanel2.setVisible(true);
			}
			if (data.contains("floating")){
                jPanel2.setVisible(false);
                jPanel4.setVisible(true);
            }
            if (data.contains("upcoming")){
                jPanel4.setVisible(false);
                jPanel2.setVisible(true);
            }
            if (data.contains("update")){
            	updateFlag+=1;
            	updateFlag=updateFlag%3;
            	if (updateFlag==1){
            	//call anirup's function-textField1.setText("");
            	}

            	}
			int index = Executor.analyze(data);
			String message = ExceptionHandler.getException(index);
			toUpdate = !(message.contains("Error"));
			//jLabel3.setText(message);

			ArrayList<String> upcomingEvents = Executor.printDataBase();
			String upcomingEventsString = format(upcomingEvents,
					getMaximumLengths(upcomingEvents));
			ArrayList<String> floatingEvents = Executor.printFloatingDataBase();
			ArrayList<String> searchResults = Executor.printSearchResults();
			String floatingEventsString = format(floatingEvents,
					getMaximumLengths(floatingEvents));
			String searchResultsString = format(searchResults,
					getMaximumLengths(searchResults));
			if (toUpdate) {
				jLabel3.setText(String.format("<html><p class=\"MsoNormal\"><b><span style=\"color: rgb(0, 176, 80)\"; >%s</span></b></p></html>",message));
				jTextArea2.setText(upcomingEventsString);
				//jTextArea4.setText(floatingEventsString);
				jTextArea1.setText(searchResultsString);
			} else {
					jLabel3.setText(String.format("<html><p class=\"MsoNormal\"><b><span style=\"color: red; \">%s</span></b></p></html>", message));

				
			}
			textField1.setText("");

			previousEntry = data;
			
		}

	}// GEN-LAST:event_textField1KeyTyped

	private String format(ArrayList<String> upcomingEvents, int[] maximumLengths) {
		String result = "";
		result += "ID" + getSpaces(maximumLengths[0] - 2) + "     "
				+ "Event Name" + getSpaces(maximumLengths[1] - 10) + "     "
				+ "Priority" + getSpaces(maximumLengths[2] - 8) + "    "
				+ "Details" + getSpaces(maximumLengths[3] - 7) + "     "
				+ "Start" + getSpaces(maximumLengths[4] - 5) + "     " + "End"
				+ getSpaces(maximumLengths[5] - 3) + "     " + "Reminder"
				+ getSpaces(maximumLengths[6] - 8) + "     " + "\n";
		for (int i = 0; i < upcomingEvents.size(); i++) {
			String[] tempArray = upcomingEvents.get(i).split("\\..");
			String[] tempArray2 = { "", "", "", "", "", "","" };
			for (int j = 0; j < tempArray.length; j++) {
				tempArray2[j] = tempArray[j];
			}
			result += tempArray2[0]
					+ getSpaces(maximumLengths[0] - tempArray2[0].length())
					+ "     ";
			result += tempArray2[1]
					+ getSpaces(maximumLengths[1] - tempArray2[1].length())
					+ "     ";
			result += tempArray2[2]
					+ getSpaces(maximumLengths[2] - tempArray2[2].length())
					+ "     ";
			result += tempArray2[3]
					+ getSpaces(maximumLengths[3] - tempArray2[3].length())
					+ "      ";
			result += tempArray2[4]
					+ getSpaces(maximumLengths[4] - tempArray2[4].length())
					+ "     ";
			result += tempArray2[5]
					+ getSpaces(maximumLengths[5] - tempArray2[5].length())
					+ "     ";
			result += tempArray2[6]
					+ getSpaces(maximumLengths[6] - tempArray2[6].length())
					+ "     ";
			result += "\n";
		}
		return result;
	}

	private String getSpaces(int number) {
		String spaces = "";
		for (int i = 0; i < number; i++) {
			spaces += " ";
		}
		return spaces;
	}

	private String format(String text) {
		String newText = "";
		newText += "Index\t" + " " + "Name\t" + " " + "Additional Details\n";
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '.' && text.charAt(i + 1) == '.') {
				newText += '\t';
				i++;
			} else {
				newText += text.charAt(i);
			}

		}
		// TODO Auto-generated method stub
		return newText;
	}

	private String formatForSearch(String text) {
		String newText = "";
		newText += "Index\t" + " " + "Name\t" + " " + "Additional Details\n";
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '.' && text.charAt(i + 1) == '.') {
				newText += '\t';
				i++;
			} else {
				newText += text.charAt(i);
			}

		}
		// TODO Auto-generated method stub
		return newText;
	}

	private int[] getMaximumLengths(ArrayList<String> unformatted) {
		int[] lengths = new int[7];
		lengths[0] = 2;
		lengths[1] = 10;
		lengths[2] = 7;
		lengths[3] = 8;
		lengths[4] = 5;
		lengths[5] = 3;
		lengths[6] = 8;
		for (int i = 0; i < unformatted.size(); i++) {
			String[] tempStorage = unformatted.get(i).split("\\..");
			for (int k = 0; k < tempStorage.length; k++) {
				if (tempStorage[k].length() > lengths[k])
					lengths[k] = tempStorage[k].length();
			}

		}
		return lengths;
	}


	private void textField1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_textField1ActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_textField1ActionPerformed

	private void textField1KeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_textField1KeyPressed
		if (evt.getKeyCode() == 38) {
			textField1.setText(previousEntry);
		}
		if (evt.getKeyCode() == 39) {
			jLabel4
					.setText("FORMAT : [operation] [key words] [date and time] [r-reminder time]");
		}// TODO add your handling code here: // TODO add your handling code
			// here:
	}// GEN-LAST:event_textField1KeyPressed

	/**
	 * @param args
	 *            the command line arguments
	 * @throws Exception
	 */
	public static void main(String args[]) throws Exception {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		ExceptionHandler.setUpList();
		Log.setup();
		try
		{
		Executor.loadDatabase();
		}
		catch(Exception e)
		{
			Executor.formatDatabase();
		}
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(What2DoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(What2DoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(What2DoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(What2DoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new What2DoUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLayeredPane jLayeredPane1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JScrollPane jScrollPane7;
	private javax.swing.JScrollPane jScrollPane6;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JTabbedPane jTabbedPane2;
	private javax.swing.JTable jTable1;
	private javax.swing.JTextArea jTextArea1;
	private javax.swing.JTextArea jTextArea2;
	private javax.swing.JTextArea jTextArea4;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private java.awt.TextField textField1;
	// End of variables declaration
}