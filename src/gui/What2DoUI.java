package gui;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JLabel;
import alarm.AlarmThread;
import logAndException.Log;
import logAndException.MessageHandler;
import executor.Executor;
 
/**
 * 
 * @author SANDEEP
 */
public class What2DoUI extends javax.swing.JFrame {
	/**
	 * Creates new form What2DoUI
	 */
	public What2DoUI() {
		initComponents();
	}

	// html1=setUp();
	String html1 = "<html><table class=\"MsoTableGrid\" border=\"1\" cellspacing=\"0\" cellpadding=\"0\" style=\"border-collapse: collapse; border: none; \"><tbody><tr><td width=\"308\" valign=\"top\" style=\"width: 231.05pt; border: 1pt solid windowtext; padding: 0cm 5.4pt; \"><p class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt; line-height: normal; \">&nbsp;</p></td><td width=\"308\" valign=\"top\" style=\"width: 231.05pt; border-style: solid solid solid none; border-top-color: windowtext; border-right-color: windowtext; border-bottom-color: windowtext; border-top-width: 1pt; border-right-width: 1pt; border-bottom-width: 1pt; padding: 0cm 5.4pt; \"><p class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt; line-height: normal; \">&nbsp;</p></td></tr><tr><td width=\"308\" valign=\"top\" style=\"width: 231.05pt; border-style: none solid solid; border-right-color: windowtext; border-bottom-color: windowtext; border-left-color: windowtext; border-right-width: 1pt; border-bottom-width: 1pt; border-left-width: 1pt; padding: 0cm 5.4pt; \"><p class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt; line-height: normal; \">&nbsp;</p></td><td width=\"308\" valign=\"top\" style=\"width: 231.05pt; border-style: none solid solid none; border-bottom-color: windowtext; border-bottom-width: 1pt; border-right-color: windowtext; border-right-width: 1pt; padding: 0cm 5.4pt; \"><p class=\"MsoNormal\" style=\"margin-bottom: 0.0001pt; line-height: normal; \">&nbsp;</p></td> </tr></tbody></table><p class=\"MsoNormal\">&nbsp;</p></html>";
	String demo = "daff";
	char lastEvent = ' ';
	int flag = 0;
	static boolean toUpdate = true;
	Vector<String> previousEntry = new Vector<String>();
	int previousIndex = 0;
	int updateFlag = 0;
	boolean searchView = false;
	boolean updateFlagBool = false;

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {
		initializeGUIElements();
		setFonts();
		setBackgrounds();
		setCursorForUserTextFields();
		addListenerToUserTextField();
		setInitialText();
		setViewPorts();
		setLogoIcons();
		setBorders();
		setOpacity();
		setTextAlignment();
		hideCertainAreasInitially();
		setLayoutsOfComponents();
		displayDatabase("");
		pack();
	}// </editor-fold>

	private void setLayoutsOfComponents() {
		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						jPanel2Layout
								.createSequentialGroup()
								.addContainerGap()
								.addComponent(jScrollPane3,
										javax.swing.GroupLayout.DEFAULT_SIZE,
										880, Short.MAX_VALUE))
				.addComponent(jScrollPane2,
						javax.swing.GroupLayout.Alignment.TRAILING));
		jPanel2Layout
				.setVerticalGroup(jPanel2Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel2Layout
										.createSequentialGroup()
										.addComponent(
												jScrollPane2,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												23,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED,
												17, Short.MAX_VALUE)
										.addComponent(
												jScrollPane3,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												289,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap()));
		jPanel2.setBounds(0, 0, 890, 340);
		jLayeredPane1.add(jPanel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(
				jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel3Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane1,
								javax.swing.GroupLayout.DEFAULT_SIZE, 863,
								Short.MAX_VALUE).addContainerGap()));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel3Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane1,
								javax.swing.GroupLayout.DEFAULT_SIZE, 309,
								Short.MAX_VALUE).addContainerGap()));
		jPanel3.setBounds(0, 0, 883, 331);
		jLayeredPane1.add(jPanel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(
				jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel4Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane7,
								javax.swing.GroupLayout.DEFAULT_SIZE, 883,
								Short.MAX_VALUE).addContainerGap()));
		jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel4Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jScrollPane7,
								javax.swing.GroupLayout.DEFAULT_SIZE, 313,
								Short.MAX_VALUE).addContainerGap()));
		jPanel4.setBounds(0, 0, 903, 335);
		jLayeredPane1.add(jPanel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout
				.setHorizontalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addGap(24, 24, 24)
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																textField1,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																javax.swing.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)
														.addComponent(
																jScrollPane4)
														.addGroup(
																jPanel1Layout
																		.createSequentialGroup()
																		.addComponent(
																				jLabel2,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				276,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jLabel1,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				591,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addContainerGap(
																				20,
																				Short.MAX_VALUE))
														.addComponent(
																jLayeredPane1))));
		jPanel1Layout
				.setVerticalGroup(jPanel1Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.TRAILING)
						.addGroup(
								jPanel1Layout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel1Layout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(
																jLabel2,
																javax.swing.GroupLayout.PREFERRED_SIZE,
																128,
																javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(jLabel1))
										.addGap(1, 1, 1)
										.addComponent(
												textField1,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												34,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jScrollPane4,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												jLayeredPane1,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												340, Short.MAX_VALUE)
										.addContainerGap()));
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addContainerGap()
						.addComponent(jPanel1,
								javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addComponent(
				jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
				javax.swing.GroupLayout.DEFAULT_SIZE,
				javax.swing.GroupLayout.PREFERRED_SIZE));
	}

	private void hideCertainAreasInitially() {
		jPanel3.setVisible(false);
		jPanel4.setVisible(false);
	}

	private void setTextAlignment() {
		jTextArea1.setHorizontalAlignment(JLabel.LEFT);
		jTextArea1.setVerticalAlignment(JLabel.TOP);
		jTextArea2.setHorizontalAlignment(JLabel.LEFT);
		jTextArea2.setVerticalAlignment(JLabel.TOP);
		jTextArea4.setHorizontalAlignment(JLabel.LEFT);
		jTextArea4.setVerticalAlignment(JLabel.TOP);
	}

	private void setOpacity() {
		jTextArea1.setOpaque(true);
		jTextArea2.setOpaque(true);
		jTextArea4.setOpaque(true);
		jLabel3.setOpaque(true);
		jLabel4.setOpaque(true);
	}

	private void setBorders() {
		jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(
				new java.awt.Color(0, 0, 0), 5));
		jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(
				0, 0, 0), 5, true));
		jTextArea2.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				"Upcoming Events",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Monospaced", 1, 14), java.awt.Color.black)); // NOI18N
		jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				"Search Results",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Monospaced", 1, 14), java.awt.Color.black));
		jTextArea4.setBorder(javax.swing.BorderFactory.createTitledBorder(null,
				"Floating Events",
				javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION,
				javax.swing.border.TitledBorder.DEFAULT_POSITION,
				new java.awt.Font("Times New Roman", 1, 14),
				java.awt.Color.black)); // NOI18N
	}

	private void setLogoIcons() {
		jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/Logo3.png"))); // NOI18N
		jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/Logo5.png"))); // NOI18N
	}

	private void setViewPorts() {
		jScrollPane4.setViewportView(jLabel4);
		jScrollPane3.setViewportView(jTextArea2);
		jScrollPane1.setViewportView(jTextArea1);
		jScrollPane7.setViewportView(jTextArea4);
		jScrollPane2.setViewportView(jLabel3);
	}

	private void setInitialText() {
		jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">Available operations are</span></b><span style=\"font-family: Helvetica, sans-serif; \">- </span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \">add (+)/delete(-)/search/update/undo/done/undone/exit</span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
	}

	private void addListenerToUserTextField() {
		textField1.addKeyListener(new java.awt.event.KeyAdapter() {
			public void keyPressed(java.awt.event.KeyEvent evt) {
				textField1KeyPressed(evt);
			}

			public void keyTyped(java.awt.event.KeyEvent evt) {
				try {
					textField1KeyTyped(evt);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});
	}

	private void setCursorForUserTextFields() {
		textField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
	}

	private void setBackgrounds() {
		jPanel1.setBackground(new java.awt.Color(241, 235, 194));
		jPanel2.setBackground(new java.awt.Color(240, 233, 194));
		jTextArea1.setBackground(new java.awt.Color(255, 255, 255));
		jTextArea2.setBackground(new java.awt.Color(255, 255, 255));
		jTextArea4.setBackground(new java.awt.Color(255, 255, 255));
		jPanel3.setBackground(new java.awt.Color(240, 233, 194));
		jLabel3.setBackground(new java.awt.Color(255, 255, 255));
		jLabel4.setBackground(new java.awt.Color(255, 255, 255));
		jPanel4.setBackground(new java.awt.Color(240, 232, 194));
	}

	private void setFonts() {
		jTextArea4.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
		jLabel4.setFont(new java.awt.Font("Monospaced", 2, 14));
		textField1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
		jLabel4.setFont(new java.awt.Font("Monospaced", 2, 14));
		jTextArea2.setFont(new java.awt.Font("Monospaced", 1, 12));
	}

	private void initializeGUIElements() {
		jPanel1 = new javax.swing.JPanel();
		textField1 = new java.awt.TextField();
		jScrollPane4 = new javax.swing.JScrollPane();
		jLabel4 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel1 = new javax.swing.JLabel();
		jLayeredPane1 = new javax.swing.JLayeredPane();
		jPanel2 = new javax.swing.JPanel();
		jScrollPane3 = new javax.swing.JScrollPane();
		jTextArea2 = new javax.swing.JLabel();
		jScrollPane2 = new javax.swing.JScrollPane();
		jLabel3 = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JLabel();
		jPanel4 = new javax.swing.JPanel();
		jScrollPane7 = new javax.swing.JScrollPane();
		jTextArea4 = new javax.swing.JLabel();
	}

	private void textField1KeyTyped(java.awt.event.KeyEvent evt)
			throws Exception {// GEN-FIRST:event_textField1KeyTyped
		setSuggestionBoxTest(evt);
		actUponUserCommand(evt);
	}

	private void actUponUserCommand(java.awt.event.KeyEvent evt)
			throws Exception {
		if (evt.getKeyChar() == '\n') {
			flag = 0;
			String data = textField1.getText();
			if (data.contains("update")) {
				int index = extractIndex(data);
				if (index != 0) {
					updateFlagBool = true;
					String event = updateStream(data, index);
					if (event != null) {
						data += event;
						textField1.setText(data);
					} else {
						textField1.setText("");
						jLabel3.setText(String
								.format("<html><p class=\"MsoNormal\"><b><span style=\"color: rgb(0, 176, 80)\"; >%s</span></b></p></html>",
										"Update Index not Found"));
						return;
					}
				} else {
					updateFlagBool = false;
				}
			}
			if (data.contains("search")) {
				searchView = true;
				setViewToSearch();
				Executor.searchToTrue();
			} else if (data.contains("floating")) {
				searchView = false;
				Executor.searchToFalse();
				setViewToFloating();
			} else {
				searchView = false;
				Executor.searchToFalse();
				setViewToUpcoming();
			}
			if (!(data.contains("update"))) {
				updateFlagBool = false;
			}
			/*
			 * if (data.contains("back")) { searchView = false;
			 * Executor.searchToFalse(); setViewToUpcoming(); }
			 * 
			 * if (data.contains("upcoming")) { searchView = false;
			 * Executor.searchToFalse(); setViewToUpcoming(); } if
			 * (data.contains("add")) { searchView = false;
			 * Executor.searchToFalse(); setViewToUpcoming(); } if
			 * (data.contains("+")) { searchView = false;
			 * Executor.searchToFalse(); setViewToUpcoming(); }
			 */
			if (updateFlagBool == false) {
				String message = analyzeInputUsingLogic(data);
				displayDatabase(message);
				prepareForNextEntry(data);
			}
		}
	}

	private String analyzeInputUsingLogic(String data) throws Exception {
		int index = Executor.analyze(data);
		String message = MessageHandler.getMessage(index);
		toUpdate = !(message.contains("Error"));
		return message;
	}

	private void setViewToFloating() {
		jPanel2.setVisible(false);
		jPanel3.setVisible(false);
		jPanel4.setVisible(true);
	}

	private void setViewToUpcoming() {
		jPanel3.setVisible(false);
		jPanel4.setVisible(false);
		jPanel2.setVisible(true);
	}

	private void setViewToSearch() {
		jPanel2.setVisible(false);
		jPanel4.setVisible(false);
		jPanel3.setVisible(true);
	}

	private void setSuggestionBoxTest(java.awt.event.KeyEvent evt) {
		if (evt.getKeyChar() == 8) {
			if (textField1.getText().isEmpty()) {
				flag = 0;
				jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">Available operations are</span></b><span style=\"font-family: Helvetica, sans-serif; \">- </span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \">add (+)/delete(-)/search/update/undo/done/undone/exit</span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
			}
		}
		if (flag == 0
				&& ((evt.getKeyChar() == 'a') || (evt.getKeyChar() == '+'))) {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[add] [Key words] [start time and date] [End time and date] [r-reminder time]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && ((evt.getKeyChar() == 'b'))) {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">Available operations are</span></b><span style=\"font-family: Helvetica, sans-serif; \">- </span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \">add (+)/delete(-)/search/update/undo/done/undone/exit</span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && (evt.getKeyChar() == '-')) {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[delete] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && evt.getKeyChar() == 'd') {
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[delete] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (evt.getKeyChar() == 'e' && lastEvent == 'd') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[delete] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		} else if (flag == 0 && evt.getKeyChar() == 'o' && lastEvent == 'd') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[done] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && evt.getKeyChar() == 's') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[search] [keywords]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && evt.getKeyChar() == 'u') {
			lastEvent = 'u';
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[update] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && evt.getKeyChar() == 'e') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[exit]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
		if (flag == 0 && evt.getKeyChar() == 'n' && lastEvent == 'u') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[undo] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		} else if (flag == 0 && evt.getKeyChar() == 'p' && lastEvent == 'u') {
			flag = 1;
			lastEvent = evt.getKeyChar();
			jLabel4.setText("<html><p class=\"MsoNormal\"><b><span style=\"font-family: Helvetica, sans-serif; \">[update] [index number]</span></b><span style=\"font-family: Helvetica, sans-serif; \"></span><b><span style=\"font-family: Helvetica, sans-serif; color: rgb(192, 80, 77); \"></span><span style=\"color: rgb(192, 80, 77); \"></span></b></p></html>");
		}
	}

	private void prepareForNextEntry(String data) {
		textField1.setText("");
		previousEntry.add(data);
		previousIndex = previousEntry.size() - 1;
	}

	private String updateStream(String message, int index) throws Exception {
		String result = findEventByIndex(index);
		String formattedResult = formatResult(result);
		return formattedResult;
	}

	private String formatResult(String result) {
		if (result != null) {
			String formattedResult = " ";
			String formattedResultArray[] = result.split("\\..");
			formattedResult += formattedResultArray[1] + " ";
			formattedResult += "#" + formattedResultArray[2] + "";
			formattedResult += formattedResultArray[3] + " ";
			if (formattedResultArray.length > 5
					&& formattedResultArray[5] != "") {
				formattedResult += formattedResultArray[5] + " ";
			}
			if (formattedResultArray.length > 6
					&& formattedResultArray[6] != "") {
				formattedResult += formattedResultArray[6] + " ";
			}
			if (formattedResultArray.length > 7
					&& formattedResultArray[7] != "") {
				formattedResult += formattedResultArray[7] + " ";
			}
			formattedResult.trim();
			return formattedResult;
		} else
			return null;
	}

	private String findEventByIndex(int index) {
		ArrayList<String> upcomingEvents = Executor.printDataBase();
		ArrayList<String> floatingEvents = Executor.printFloatingDataBase();
		ArrayList<String> searchResults = Executor.printSearchResults();
		String index_string = Integer.toString(index);
		if (index == 0) {
			return null;
		} else {
			for (int i = 0; i < searchResults.size(); i++)
				if (searchResults.get(i).startsWith(index_string))
					return searchResults.get(i);
			for (int i = 0; i < upcomingEvents.size(); i++)
				if (upcomingEvents.get(i).startsWith(index_string))
					return upcomingEvents.get(i);
			for (int i = 0; i < floatingEvents.size(); i++)
				if (floatingEvents.get(i).startsWith(index_string))
					return floatingEvents.get(i);
		}
		return null;
	}

	private int extractIndex(String message) {
		String trimmedMessage = message.replace("update ", "");
		try {
			return Integer.parseInt(trimmedMessage);
		} catch (Exception noIndex) {
			return 0;
		}
	}

	private void displayDatabase(String message) {
		ArrayList<String> upcomingEvents = Executor.printDataBase();
		ArrayList<String> floatingEvents = Executor.printFloatingDataBase();
		ArrayList<String> searchResults = Executor.printSearchResults();
		// index, name, hash-tags, start time end time, reminder
		/*
		 * String upcomingEventsString =
		 * format(upcomingEvents,getMaximumLengths(upcomingEvents)); String
		 * floatingEventsString = format(floatingEvents,
		 * getMaximumLengths(floatingEvents)); String searchResultsString =
		 * format(searchResults,getMaximumLengths(searchResults));
		 */
		ArrayList<ArrayList<String>> demoUpcomingEvents = new ArrayList<ArrayList<String>>();
		ArrayList<ArrayList<String>> demoFloatingEvents = new ArrayList<ArrayList<String>>();
		ArrayList<ArrayList<String>> demoSearch = new ArrayList<ArrayList<String>>();
		ArrayList<ArrayList<String>> formattedUpcomingEvents = new ArrayList<ArrayList<String>>();
		ArrayList<ArrayList<String>> formattedFloatingEvents = new ArrayList<ArrayList<String>>();
		ArrayList<ArrayList<String>> formattedSearchResults = new ArrayList<ArrayList<String>>();
		for (int i = 0; i < 100; i++) {
			ArrayList<String> temp = new ArrayList<String>();
			for (int j = 0; j < 10; j++) {
				temp.add("");
			}
			demoUpcomingEvents.add(temp);
		}
		for (int i = 0; i < 100; i++) {
			ArrayList<String> temp = new ArrayList<String>();
			for (int j = 0; j < 10; j++) {
				temp.add("");
			}
			demoFloatingEvents.add(temp);
		}
		for (int i = 0; i < 100; i++) {
			ArrayList<String> temp = new ArrayList<String>();
			for (int j = 0; j < 10; j++) {
				temp.add("");
			}
			demoSearch.add(temp);
		}
		for (int i = 0; i < 100; i++) {
			ArrayList<String> temp = new ArrayList<String>();
			for (int j = 0; j < 10; j++) {
				temp.add("");
			}
			formattedUpcomingEvents.add(temp);
		}
		for (int i = 0; i < 100; i++) {
			ArrayList<String> temp = new ArrayList<String>();
			for (int j = 0; j < 10; j++) {
				temp.add("");
			}
			formattedFloatingEvents.add(temp);
		}
		for (int i = 0; i < 100; i++) {
			ArrayList<String> temp = new ArrayList<String>();
			for (int j = 0; j < 10; j++) {
				temp.add("");
			}
			formattedSearchResults.add(temp);
		}
		formatForUpcoming(demoUpcomingEvents, upcomingEvents);
		formatForSearch(demoSearch, searchResults);
		formatForFloating(demoFloatingEvents, floatingEvents);
		format(formattedUpcomingEvents, upcomingEvents,
				getMaximumLengths(upcomingEvents));
		format(formattedFloatingEvents, floatingEvents,
				getMaximumLengths(floatingEvents));
		format(formattedSearchResults, searchResults,
				getMaximumLengths(searchResults));
		// String
		// html2="<html><p class=\"MsoNormal\"><b>ID &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Events Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(192, 80, 77); \">Details</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(31, 73, 125); \">Start</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(31, 73, 125); \">End</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(152, 72, 7); \">Reminder</span></b></p>";
		String html2 = "<html>";
		String html3 = "<html>";
		String html4 = "<html>";
		if (toUpdate) {
			for (int i = 0; i < upcomingEvents.size(); i++) {
				// html2+=String.format("<br><p class=\"MsoNormal\"><b>%s<span style=\"color: rgb(192, 80, 77); \">%s</span><span style=\"color: rgb(31, 73, 125); \">%s</span><span style=\"color: rgb(31, 73, 125); \">%s</span><span style=\"color: rgb(152, 72, 7); \">%s</span><span style=\"color: rgb(31, 73, 125); \">%s</span></b></p>",
				// demoUpcomingEvents.get(i+1).get(0),
				// demoUpcomingEvents.get(i+1).get(1),
				// demoUpcomingEvents.get(i+1).get(2),
				// demoUpcomingEvents.get(i+1).get(3),
				// demoUpcomingEvents.get(i+1).get(4),
				// demoUpcomingEvents.get(i+1).get(5),
				// demoUpcomingEvents.get(i+1).get(6));
				// html2+=String.format("<br><p class=\"MsoNormal\"><b>%s <span style=\"color: rgb(192, 80, 77); \">%s</span><span style=\"color: rgb(31, 73, 125); \">%s</span><span style=\"color: rgb(31, 73, 125); \">%s</span><span style=\"color: rgb(152, 72, 7); \">%s</span></b></p>",
				// formattedDisplay.get(i+1).get(0),
				// formattedDisplay.get(i+1).get(1),
				// formattedDisplay.get(i+1).get(2),
				// formattedDisplay.get(i+1).get(3),
				// formattedDisplay.get(i+1).get(4),
				// formattedDisplay.get(i+1).get(5));
				// html2+=String.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); \">%s</span>&nbsp;<span style=\"color: red; \">%s</span> &nbsp;<span style=\"color: rgb(155, 187, 89); \">%s</span> &nbsp;<span style=\"color: rgb(75, 172, 198); \">%s</span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">%s</span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">%s</span></span></b></p>",
				// demoUpcomingEvents.get(i+1).get(0),
				// demoUpcomingEvents.get(i+1).get(1),
				// demoUpcomingEvents.get(i+1).get(2),
				// demoUpcomingEvents.get(i+1).get(3),
				// demoUpcomingEvents.get(i+1).get(4),
				// demoUpcomingEvents.get(i+1).get(5),
				// demoUpcomingEvents.get(i+1).get(6));
				// html2+=String.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); \">%s</span>&nbsp;<span style=\"color: red; \">%s</span> &nbsp;<span style=\"color: rgb(155, 187, 89); \">%s</span> &nbsp;<span style=\"color: rgb(75, 172, 198); \">%s</span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">%s</span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">%s</span></span></b></p>",
				// formattedUpcomingEvents.get(i+1).get(0),
				// formattedUpcomingEvents.get(i+1).get(1),
				// formattedUpcomingEvents.get(i+1).get(2),
				// formattedUpcomingEvents.get(i+1).get(3),
				// formattedUpcomingEvents.get(i+1).get(4),
				// formattedUpcomingEvents.get(i+1).get(5),
				// formattedUpcomingEvents.get(i+1).get(6));
				if (formattedUpcomingEvents.get(i + 1).get(4).contains("true")) {
					html2 += String
							.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); background-color: lime; background-position: initial initial; background-repeat: initial initial;\">%s</span>&nbsp;<span style=\"color: red; \">",
									formattedUpcomingEvents.get(i + 1).get(0),
									formattedUpcomingEvents.get(i + 1).get(1));
				} else {
					html2 += String
							.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); \">%s</span>&nbsp;<span style=\"color: red; \">",
									formattedUpcomingEvents.get(i + 1).get(0),
									formattedUpcomingEvents.get(i + 1).get(1));
				}
				if (formattedUpcomingEvents.get(i + 1).get(2)
						.contains("NORMAL")) {
					html2 += "</span> <span style=\"color: rgb(255,128,0); \">";
				}
				if (formattedUpcomingEvents.get(i + 1).get(2).contains("LOW")) {
					html2 += "</span> <span style=\"color: rgb(204,127,50); \">";
				}
				html2 += String
						.format("%s</span> &nbsp;<span style=\"color: rgb(155, 187, 89); \">",
								formattedUpcomingEvents.get(i + 1).get(2));
				html2 += String
						.format("%s</span> &nbsp;<span style=\"color: rgb(0, 0, 0); \"",
								formattedUpcomingEvents.get(i + 1).get(3));
				html2 += "<b><i>Starts at </b></i></span><span style=\"color: rgb(75, 172, 198); \">";

				html2 += String
						.format("%s</span>&nbsp; <span style=\"color: rgb(0, 0, 0); \">",
								formattedUpcomingEvents.get(i + 1).get(5));
				if (formattedUpcomingEvents.get(i + 1).get(6).contains(":")) {
					html2 += "<b><i>to </b></i></span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">";
				} else {
					html2 += "<b><i></b></i></span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">";
				}
				html2 += String
						.format("%s</span>&nbsp; <span style=\"color: rgb(0, 0, 0); \">",
								formattedUpcomingEvents.get(i + 1).get(6));
				if (formattedUpcomingEvents.get(i + 1).get(7).contains("r-")) {
					html2 += "<b><i>Reminder at : </b></i></span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">";
				} else {
					html2 += "<b><i></b></i></span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">";
				}
				String reminderTime=formattedUpcomingEvents.get(i + 1).get(7).replace("r-", "");
				html2 += String.format("%s</span></span></b></p>",
						reminderTime);
			}
			for (int i = 0; i < floatingEvents.size(); i++) {
				// html3+=String.format("<br><p class=\"MsoNormal\"><b>%s &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(192, 80, 77); \">%s</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(31, 73, 125); \">%s</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(31, 73, 125); \">%s</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(152, 72, 7); \">%s</span></b></p>",
				// demoFloatingEvents.get(i+1).get(0),
				// demoFloatingEvents.get(i+1).get(1),
				// demoFloatingEvents.get(i+1).get(2),
				// demoFloatingEvents.get(i+1).get(3),
				// demoFloatingEvents.get(i+1).get(4),
				// demoFloatingEvents.get(i+1).get(5));
				// html3+=String.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); \">%s</span>&nbsp;<span style=\"color: red; \">%s</span> &nbsp;<span style=\"color: rgb(155, 187, 89); \">%s</span> &nbsp;<span style=\"color: rgb(75, 172, 198); \">%s</span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">%s</span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">%s</span></span></b></p>",
				// formattedFloatingEvents.get(i+1).get(0),
				// formattedFloatingEvents.get(i+1).get(1),
				// formattedFloatingEvents.get(i+1).get(2),
				// formattedFloatingEvents.get(i+1).get(3),
				// formattedFloatingEvents.get(i+1).get(5),
				// formattedFloatingEvents.get(i+1).get(6),
				// formattedFloatingEvents.get(i+1).get(7));
				if (formattedFloatingEvents.get(i + 1).get(4).contains("true")) {
					html3 += String
							.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); background-color: lime; background-position: initial initial; background-repeat: initial initial;\">%s</span>&nbsp;<span style=\"color: red; \">",
									formattedFloatingEvents.get(i + 1).get(0),
									formattedFloatingEvents.get(i + 1).get(1));
				} else {
					html3 += String
							.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); \">%s</span>&nbsp;<span style=\"color: red; \">",
									formattedFloatingEvents.get(i + 1).get(0),
									formattedFloatingEvents.get(i + 1).get(1));
				}
				if (formattedFloatingEvents.get(i + 1).get(2)
						.contains("NORMAL")) {
					html3 += "</span> <span style=\"color: orange; \">";
				}
				html3 += String
						.format("%s</span> &nbsp;<span style=\"color: rgb(155, 187, 89); \">",
								formattedFloatingEvents.get(i + 1).get(2));
				html3 += String
						.format("%s</span> &nbsp;<span style=\"color: rgb(75, 172, 198); \"",
								formattedFloatingEvents.get(i + 1).get(3));
				html3 += String
						.format(">%s</span>&nbsp; <span style=\"color: rgb(0, 0, 0); \">",
								formattedFloatingEvents.get(i + 1).get(5));
				if (formattedFloatingEvents.get(i + 1).get(6).contains(":")) {
					html3 += "<b><i>to </b></i></span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">";
				} else {
					html3 += "<b><i></b></i></span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">";
				}
				html3 += String
						.format("%s</span>&nbsp; <span style=\"color: rgb(0, 0, 0); \">",
								formattedFloatingEvents.get(i + 1).get(6));
				if (formattedFloatingEvents.get(i + 1).get(7).contains(":")) {
					html3 += "<b><i>Reminder at : </b></i></span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">";
				} else {
					html3 += "<b><i></b></i></span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">";
				}
				String reminderTime=formattedFloatingEvents.get(i + 1).get(7).replace("r-", "");
				html3 += String.format("%s</span></span></b></p>",
						reminderTime);
			}
			for (int i = 0; i < searchResults.size(); i++) {
				// html4+=String.format("<br><p class=\"MsoNormal\"><b>%s &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; %s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(192, 80, 77); \">%s</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(31, 73, 125); \">%s</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(31, 73, 125); \">%s</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style=\"color: rgb(152, 72, 7); \">%s</span></b></p>",
				// demoSearch.get(i+1).get(0), demoSearch.get(i+1).get(1),
				// demoSearch.get(i+1).get(2), demoSearch.get(i+1).get(3),
				// demoSearch.get(i+1).get(4), demoSearch.get(i+1).get(6));
				// html4+=String.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); \">%s</span>&nbsp;<span style=\"color: red; \">%s</span> &nbsp;<span style=\"color: rgb(155, 187, 89); \">%s</span> &nbsp;<span style=\"color: rgb(75, 172, 198); \">%s</span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">%s</span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">%s</span></span></b></p>",
				// formattedSearchResults.get(i+1).get(0),
				// formattedSearchResults.get(i+1).get(1),
				// formattedSearchResults.get(i+1).get(2),
				// formattedSearchResults.get(i+1).get(3),
				// formattedSearchResults.get(i+1).get(5),
				// formattedSearchResults.get(i+1).get(6),
				// formattedSearchResults.get(i+1).get(7));
				if (formattedSearchResults.get(i + 1).get(4).contains("true")) {
					html4 += String
							.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); background-color: lime; background-position: initial initial; background-repeat: initial initial;\">%s</span>&nbsp;<span style=\"color: red; \">",
									formattedSearchResults.get(i + 1).get(0),
									formattedSearchResults.get(i + 1).get(1));
				} else {
					html4 += String
							.format("<br><p class=\"MsoNormal\"><b>%s&nbsp;<span style=\"color: rgb(0, 32, 96); \">%s</span>&nbsp;<span style=\"color: red; \">",
									formattedSearchResults.get(i + 1).get(0),
									formattedSearchResults.get(i + 1).get(1));
				}
				if (formattedSearchResults.get(i + 1).get(2).contains("NORMAL")) {
					html4 += "</span> <span style=\"color: orange; \">";
				}
				html4 += String
						.format("%s</span> &nbsp;<span style=\"color: rgb(155, 187, 89); \">",
								formattedSearchResults.get(i + 1).get(2));
				html4 += String
						.format("%s</span> &nbsp;<span style=\"color: rgb(75, 172, 198); \"",
								formattedSearchResults.get(i + 1).get(3));
				html4 += String
						.format(">%s</span>&nbsp; <span style=\"color: rgb(0, 0, 0); \">",
								formattedSearchResults.get(i + 1).get(5));
				if (formattedSearchResults.get(i + 1).get(6).contains(":")) {
					html4 += "<b><i>to </b></i></span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">";
				} else {
					html4 += "<b><i></b></i></span>&nbsp; <span style=\"color: rgb(79, 129, 189); \">";
				}
				html4 += String
						.format("%s</span>&nbsp; <span style=\"color: rgb(0, 0, 0); \">",
								formattedSearchResults.get(i + 1).get(6));
				if (formattedSearchResults.get(i + 1).get(7).contains(":")) {
					html4 += "<b><i>Reminder at : </b></i></span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">";
				} else {
					html4 += "<b><i></b></i></span>&nbsp; <span style=\"color: rgb(228, 108, 10); \">";
				}
				String reminderTime=formattedSearchResults.get(i + 1).get(7).replace("r-", "");
				html4 += String.format("%s</span></span></b></p>",
						reminderTime);
			}
			html2 += "</p></html>";
			html3 += "</html>";
			html4 += "</html>";
			jTextArea2.setText(html2);
			jTextArea4.setText(html3);
			jTextArea1.setText(html4);
			jLabel3.setText(String
					.format("<html><p class=\"MsoNormal\"><b><span style=\"color: rgb(0, 176, 80)\"; >%s</span></b></p></html>",
							message));
		} else {
			jLabel3.setText(String
					.format("<html><p class=\"MsoNormal\"><b><span style=\"color: red; \">%s</span></b></p></html>",
							message));
		}
	}

	private void formatForUpcoming(ArrayList<ArrayList<String>> demo,
			ArrayList<String> events) {
		demo.get(0).set(0, "ID");
		demo.get(0).set(1, "Event Name");
		demo.get(0).set(2, "Details");
		demo.get(0).set(3, "Start");
		demo.get(0).set(4, "End");
		demo.get(0).set(5, "Reminder");
		for (int i = 0; i < events.size(); i++) {
			String[] tempArray = events.get(i).split("\\..");
			for (int j = 0; j < tempArray.length; j++) {
				demo.get(i + 1).set(j, tempArray[j]);
			}
		}
	}

	private void formatForSearch(ArrayList<ArrayList<String>> demo,
			ArrayList<String> events) {
		demo.get(0).set(0, "ID");
		demo.get(0).set(1, "Event Name");
		demo.get(0).set(2, "Details");
		demo.get(0).set(3, "Start");
		demo.get(0).set(4, "End");
		demo.get(0).set(5, "Reminder");
		for (int i = 0; i < events.size(); i++) {
			String[] tempArray = events.get(i).split("\\..");
			for (int j = 0; j < tempArray.length; j++) {
				demo.get(i + 1).set(j, tempArray[j]);
			}
		}
	}

	private void formatForFloating(ArrayList<ArrayList<String>> demo,
			ArrayList<String> events) {
		demo.get(0).set(0, "ID");
		demo.get(0).set(1, "Event Name");
		demo.get(0).set(2, "Details");
		for (int i = 0; i < events.size(); i++) {
			String[] tempArray = events.get(i).split("\\..");
			for (int j = 0; j < tempArray.length; j++) {
				demo.get(i + 1).set(j, tempArray[j]);
			}
		}
	}

	/*
	 * private String format(ArrayList<String> events, int[] maximumLengths) {
	 * String result = ""; result += "ID" + getSpaces(maximumLengths[0] - 2) +
	 * " " + "Event Name" + getSpaces(maximumLengths[1] - 10) + " " + "Details"
	 * + getSpaces(maximumLengths[2] - 7) + " " + "Start" +
	 * getSpaces(maximumLengths[3] - 5) + " " + "End" +
	 * getSpaces(maximumLengths[4] - 3) + " " + "Reminder" +
	 * getSpaces(maximumLengths[5] - 8) + " " + "\n"; for (int i = 0; i <
	 * events.size(); i++) { String[] tempArray = events.get(i).split("\\..");
	 * String[] tempArray2 = { "", "", "", "", "", "" }; for (int j = 0; j <
	 * tempArray.length; j++) { tempArray2[j] = tempArray[j]; } result +=
	 * tempArray2[0] + getSpaces(maximumLengths[0] - tempArray2[0].length()) +
	 * " "; result += tempArray2[1] + getSpaces(maximumLengths[1] -
	 * tempArray2[1].length()) + " "; result += tempArray2[2] +
	 * getSpaces(maximumLengths[2] - tempArray2[2].length()) + " "; result +=
	 * tempArray2[3] + getSpaces(maximumLengths[3] - tempArray2[3].length()) +
	 * " "; result += tempArray2[4] + getSpaces(maximumLengths[4] -
	 * tempArray2[4].length()) + " "; result += tempArray2[5] +
	 * getSpaces(maximumLengths[5] - tempArray2[5].length()) + " "; result +=
	 * "\n"; } return result; }
	 */
	private void format(ArrayList<ArrayList<String>> formattedDisplay,
			ArrayList<String> events, int[] maximumLengths) {
		formattedDisplay.get(0).set(0,
				"ID" + getSpaces(maximumLengths[0] - 2) + " ");
		formattedDisplay.get(0).set(1,
				"Event Name" + getSpaces(maximumLengths[1] - 10) + " ");
		formattedDisplay.get(0).set(2,
				"Details" + getSpaces(maximumLengths[2] - 7) + " ");
		formattedDisplay.get(0).set(3,
				"Start" + getSpaces(maximumLengths[3] - 5) + " ");
		formattedDisplay.get(0).set(4,
				"End" + getSpaces(maximumLengths[4] - 3) + " ");
		formattedDisplay.get(0).set(5,
				"Reminder" + getSpaces(maximumLengths[5] - 8) + " ");
		for (int i = 0; i < events.size(); i++) {
			String[] tempArray = events.get(i).split("\\..");
			String[] tempArray2 = { "", "", "", "", "", "", "", "" };
			for (int j = 0; j < tempArray.length; j++) {
				tempArray2[j] = tempArray[j];
			}
			formattedDisplay.get(i + 1).set(
					0,
					tempArray2[0]
							+ getSpaces(maximumLengths[0]
									- tempArray2[0].length()) + " ");
			formattedDisplay.get(i + 1).set(
					1,
					tempArray2[1]
							+ getSpaces(maximumLengths[1]
									- tempArray2[1].length()) + " ");
			formattedDisplay.get(i + 1).set(
					2,
					tempArray2[2]
							+ getSpaces(maximumLengths[2]
									- tempArray2[2].length()) + " ");
			formattedDisplay.get(i + 1).set(
					3,
					tempArray2[3]
							+ getSpaces(maximumLengths[3]
									- tempArray2[3].length()) + " ");
			formattedDisplay.get(i + 1).set(
					4,
					tempArray2[4]
							+ getSpaces(maximumLengths[4]
									- tempArray2[4].length()) + " ");
			formattedDisplay.get(i + 1).set(
					5,
					tempArray2[5]
							+ getSpaces(maximumLengths[5]
									- tempArray2[5].length()) + " ");
			formattedDisplay.get(i + 1).set(
					6,
					tempArray2[6]
							+ getSpaces(maximumLengths[6]
									- tempArray2[6].length()) + " ");
			formattedDisplay.get(i + 1).set(
					7,
					tempArray2[7]
							+ getSpaces(maximumLengths[7]
									- tempArray2[7].length()) + " ");
		}
	}

	private String getSpaces(int number) {
		String spaces = "";
		for (int i = 0; i < number; i++) {
			spaces += " ";
		}
		return spaces;
	}

	private int[] getMaximumLengths(ArrayList<String> unformatted) {
		int[] lengths = new int[8];
		lengths[0] = 2;
		lengths[1] = 10;
		lengths[2] = 7;
		lengths[3] = 5;
		lengths[4] = 3;
		lengths[5] = 8;
		lengths[6] = 0;
		lengths[7] = 0;
		for (int i = 0; i < unformatted.size(); i++) {
			String[] tempStorage = unformatted.get(i).split("\\..");
			for (int k = 0; k < tempStorage.length; k++) {
				if (tempStorage[k].length() > lengths[k])
					lengths[k] = tempStorage[k].length();
			}
		}
		return lengths;
	}

	private void textField1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_textField1ActionPerformed
	// TODO add your handling code here:
	}// GEN-LAST:event_textField1ActionPerformed

	private void textField1KeyPressed(java.awt.event.KeyEvent evt) {// GEN-FIRST:event_textField1KeyPressed
		if (evt.getKeyCode() == 38 && previousIndex >= 0
				&& !previousEntry.isEmpty()) {
			textField1.setText(previousEntry.get(previousIndex));
			previousIndex--;
		}
		if (evt.getKeyCode() == 40 && previousIndex != previousEntry.size() - 1
				&& !(previousEntry.isEmpty())) {
			textField1.setText(previousEntry.get(++previousIndex));
		}
	}

	/**
	 * @param args
	 *            the command line arguments
	 * @throws Exception
	 */
	public static void main(String args[]) throws Exception {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		MessageHandler.setUpList();
		Log.setup();
		AlarmThread newAlarm = new AlarmThread();
		new Thread(newAlarm).start();
		try {
			Executor.loadDatabase();
		} catch (Exception e) {
			Executor.formatDatabase();
		}
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(What2DoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(What2DoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(What2DoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(What2DoUI.class.getName()).log(
					java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			@Override
			public void run() {
				new What2DoUI().setVisible(true);
			}
		});
	}

	// Variables declaration - do not modify
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLayeredPane jLayeredPane1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JScrollPane jScrollPane4;
	private javax.swing.JScrollPane jScrollPane7;
	private javax.swing.JScrollPane jScrollPane6;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JTabbedPane jTabbedPane2;
	private javax.swing.JTable jTable1;
	private javax.swing.JLabel jTextArea1;
	private javax.swing.JLabel jTextArea2;
	private javax.swing.JLabel jTextArea4;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private java.awt.TextField textField1;
	// End of variables declaration
}